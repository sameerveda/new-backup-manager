plugins {
    id 'jacoco'
    id 'java'
    id 'application'
}

apply from: '../extra.gradle'

repositories {
    jcenter()
}

version = 1.12
sourceCompatibility = JavaVersion.VERSION_1_8 
targetCompatibility = JavaVersion.VERSION_1_8
 
mainClassName = 'Main'

dependencies {
  [
   B_API,
   B_DRIVE_LINK, B_CONFIG_BASE, B_CONFIG_JSON, 
    B_TRANSFERER_IMPL, B_Z_IMPL, 
   B_WALKER_IMPL, FEATHER, B_LOGGER, JSON].each {
    implementation(it)
  }
}

task toast {
  doLast {
    println(appdir)
    println(run.workingDir)
  }
}
	
task combineCss {
  def rsrc = sourceSets.main.resources.srcDirs[0] 
  ext.rsrcDir = new File(rsrc, 'styles')
  ext.outputFile = new File(rsrc, 'styles.css')
  
  doLast {
    long mod  = outputFile.lastModified();
    def filesList = file(rsrcDir).listFiles();
    if(filesList.any{it.lastModified() != mod}) {
      file(outputFile).text = 
        filesList
		.collect{f -> "/** ${f.name} */ \n"+f.text+'\n\n'}
		.join()
	  
	  mod = outputFile.lastModified();
	  filesList.each{it.lastModified = mod}
	  println('css combined');
    }
  
  }
}

compileJava.dependsOn << combineCss

run {
 workingDir appdir.parent
 systemProperty "java.util.logging.config.file", file('test-logging.properties').absolutePath
 systemProperty 'sam.backup.manager.api.AppConfig.file', 'appconfig.properties'
}

task deleteJars {
  doLast {
     file(appdir).listFiles().each({
       if(it.name.endsWith('.jar'))
         it.delete();
     });
  }
}

task install(type: Copy, dependsOn:[installDist, deleteJars]) {
  def libdir = file(new File(installDist.destinationDir, 'lib')) 
  from libdir
  into appdir
  
  doLast {
     new File(appdir, 'run.cmd').text = """
  @echo off
  setlocal
  
  ${versionText()}
  
  java %JVM_OPTS% %JAVA_OPTS% -cp \"%~dp0;%~dp0${String.join(';%~dp0', libdir.list())}\" ${mainClassName} %*
  
  """.stripIndent()
  } 
}


def versionText() {
  if(!version && version == 'unspecified') return '';
  String s = "echo version: %APP_VERSION% (${java.time.LocalDateTime.now().format(java.time.format.DateTimeFormatter.ofLocalizedDateTime(java.time.format.FormatStyle.MEDIUM))}^)"
  return """
  SET APP_VERSION=${version}
  if [%1]==[-v] (
    ${s}
    goto:eof
  )
  if [%1]==[--version] (
    ${s}
    goto:eof
  )
  """;    
}


jar {
  exclude 'styles'
}

defaultTasks 'install'


test {
  useJUnitPlatform()
  systemProperty 'java.util.logging.config.file','test-logging.properties'
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacoco.html")
    }
}

